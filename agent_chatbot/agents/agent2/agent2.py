import json
import time
from pprint import pprint
from typing import Dict, Any

from agent_chatbot.agents.agent2.rag import initialize_rag
from agent_chatbot.common.deep_merge import deep_merge
from chatwoot.utils import handle_ai_response


class Agent2:
    def __init__(self, llm_clients: Dict[str, Any], config: Dict[str, Any] = None):
        self.llms = llm_clients
        self.config = config

        # # 1) Ask PromptManager for compiled templates for "Agent2"
        # prompts = PromptManager.get_prompts_for("agent2")
        # self.system_tmpl   = prompts["system_tmpl"]
        # self.few_shot_pairs= prompts["few_shot_pairs"]
        # self.response_tmpl = prompts["response_tmpl"]

    # agent2_retrieve_product_info
    def handle(self, payload):
        # Extract parameters from the payload dictionary.
        user_message = payload.get("user_message", "")
        chat_history = payload.get("chat_history", [])
        business_logic = payload.get("business_logic", [])
        user_profile = payload.get("user_profile", "")
        workflow_stage = payload.get("workflow_stage", "Needs Assessment")
        user_feedback = payload.get("user_feedback", "")
        instruction = payload.get("instruction", "")
        agent2_hint = payload.get("hints", {}).get("Agent2", "")
        contextualized_query = payload.get("contextualized_query", "")
        # print("agent2_hint", agent2_hint)

        start = time.time()
        # Invoke the RAG system using the extracted parameters.
        # Note: Replace 'rag.invoke' with your actual RAG system call.
        rag = initialize_rag(self.llms)
        result = rag.invoke({
            "input": user_message,
            "chat_history": chat_history,
            "business_logic": business_logic,
            "user_profile": user_profile,
            "workflow_stage": workflow_stage,
            "instruction": instruction,
            "user_feedback": user_feedback,
            "agent2_hint": agent2_hint,
            "contextualized_query": contextualized_query
        })
        end = time.time()
        print(f"‚è±Ô∏è Time taken - agent 2: {end - start:.4f} seconds")
        print("agent 2 answer:", result["answer"])

        # send chatwoot
        conversation_id = payload["additional_info"]["conversation_id"]
        json_answer = json.loads(result["answer"])
        ai_response = json_answer.get("result")

        handle_ai_response(conversation_id, ai_response, chat_history)

        # Merge any ‚Äúadditional_info‚Äù from Agent2
        if "additional_info" in json_answer:
            payload["additional_info"] = deep_merge(
                payload.get("additional_info", {}),
                json_answer["additional_info"]
            )
        print("payload after updating additional info")
        pprint(payload)

        return (result
                # , float(f"{end - start:.4f}")
                )

# if __name__ == "__main__":
#     workflow_stages = "Greeting, Needs Assessment, Qualification, Product Presentation, Objection Handling, Closing"
#
#     payload = {'cart': ['loa n√†y'], 'customer_info': {'customer_name': 'Kh√°nh', 'customer_phone': '0909933916'},
#                'user_message': 'T∆∞ v·∫•n cho t√¥i loa nghe nh·∫°c d∆∞·ªõi 3tr',
#                'workflow_stage': 'Needs Assessment', 'chat_history': [],
#                'business_logic': '1. rule-004:\n   When a user mentions or asks about a product with a specific price (X), any alternative or upsell recommendation should fall within a reasonable price range around X, based on customer intent.\n\n2. rule-001:\n   If user asks about a product, recommend discounted items and ask about intended usage.',
#                'user_feedback': 'üßæ t√¥i mu·ªën mua loa bose 101 mexico\n‚ùå Xin l·ªói, t√¥i kh√¥ng th·ªÉ cung c·∫•p th√¥ng tin v√¨ context kh√¥ng n√≥i r√µ v·ªÅ n∆°i b·∫°n c√≥ th·ªÉ mua loa Bose 101 Mexico.\nüõ† Khi kh√°ch h√†ng n√≥i mu·ªën mua, b·∫°n ko c·∫ßn ph·∫£i xem x√©t kh·∫£ nƒÉng th·ª±c s·ª± mua ·ªü ƒë√¢u, m√† l√† nh·ªØng th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ mua, nh∆∞ gi√°, th·ªùi gian b·∫£o h√†ng.\n‚úÖ V√¢ng, b√™n ch√∫ng t√¥i c√≥ b√°n loa bose 101 mexico, v·ªõi gi√° l√† <gi√°> v√† th·ªùi gian b·∫£o h√†nh l√† <th·ªùi gian b·∫£o h√†nh> th√°ng <v√† c√°c th√¥ng tin c·∫ßn thi·∫øt kh√°c n·∫øu b·∫°n th·∫•y ch√∫ng ph√π h·ª£p>\n\n---\n\nüßæ Anh ƒë√£ mua loa JBL Eon 712 Loa li·ªÅn c√¥ng su·∫•t, Th·∫•y qu·∫£ng c√°o khuy·∫øn m√£i amplifiers, T∆∞ v·∫•n ƒë·∫ßu t∆∞ th√™m g√¨ ƒë·ªÉ c√≥ b·ªô Karaoke t·ªët h∆°n kh√¥ng ?\n‚ùå T√¥i kh√¥ng bi·∫øt\nüõ† B·∫°n tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c tr·∫£ l·ªùi "T√¥i kh√¥ng bi·∫øt" hay c√°c c√¢u tr·∫£ l·ªùi c·ª•t ng·ªßn nh∆∞ v·∫≠y ƒë∆∞·ª£c.\n‚úÖ D·∫°, t√¥i kh√¥ng bi·∫øt ph·∫£i h·ªó tr·ª£ b·∫°n nh∆∞ th·∫ø n√†o. B·∫°n c√≥ th·ªÉ t∆∞ v·∫•n nh√¢n vi√™n k·ªπ thu·∫≠t c·ªßa 769audio t·∫°i SƒêT: <SƒêT>\n\n---\n\nüßæ t√¥i mu·ªën mua loa bose 101 mexico\n‚ùå Loa Bose 101 Mexico b·∫°n mu·ªën mua l√† h√†ng c≈© ƒë√£ qua s·ª≠ d·ª•ng v√¨ hi·ªán nay h√£ng Bose kh√¥ng c√≤n s·∫£n xu·∫•t model n√†y n·ªØa. Gi√° c·ªßa loa Bose 101 Mexico l√† 2,900,000 VND v√† s·∫£n ph·∫©m b·∫£o h√†nh trong 02 th√°ng.\nüõ† Khi b·∫°n b√°o gi√°, b·∫°n n√™n h·ªèi l√† "gi√° b√™n ch√∫ng t√¥i" h√£y "gi√° b√°n c·ªßa c·ª≠a h√†ng 769audio".\n‚úÖ V√¢ng, Loa Bose 101 ch√∫ng t√¥i c√≥ gi√° l√† <gi√° s·∫£n ph·∫©m>',
#                'user_profile': '', 'workflow_stages': workflow_stages,
#                'instruction': 'ƒê·∫∑t c√¢u h·ªèi tr·ªçng t√¢m ƒë·ªÉ kh√°m ph√° nhu c·∫ßu...',
#                "hints": {}
#                }
#
#     agent2_result = agent2_retrieve_product_info(payload)
#     pprint(agent2_result)
